The ``1-my_list`` module
============================

Using ``MyList``
---------------------

Importing function from the module:
    >>> MyList = __import__('1-my_list').MyList


sort list 1:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

sort list 2:
    >>> new_list = MyList([0, 15, 3, 5, 7])
    >>> new_list.print_sorted()
    [0, 3, 5, 7, 15]

sort list 3:
    >>> new_list = MyList([2, 0, 5, 3, 5, 1, 3, 2])
    >>> new_list.print_sorted()
    [0, 1, 2, 2, 3, 3, 5, 5]

empty list:
    >>> new_list = MyList([])
    >>> new_list.print_sorted()
    []

List with characters:
    >>> new_list = MyList(['1', '16', '8'])
    >>> new_list.print_sorted()
    ['1', '16', '8']

List with a string:
    >>> new_list = MyList(["6", "3"])
    >>> new_list.print_sorted()
    ['3', '6']

List with negative numbers:
    >>> new_list = MyList([-4, 12, -23, 468, -200])
    >>> new_list.print_sorted()
    [-200, -23, -4, 12, 468]

checking the type:
    >>> new_list = MyList()
    >>> print(type(new_list) == MyList)
    True

cheking if MyList is an instance of list:
    >>> new_list = MyList()
    >>> print(isinstance(new_list, list))
    True

cheking if MyList is a subclass of list:
    >>> print(issubclass(MyList, list))
    True

Check if print_sorted() returns a new list
    >>> my_list = MyList()
    >>> my_list.append(7)
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.print_sorted()
    [1, 2, 7]
    >>> my_list
    [7, 1, 2]

Print_sorted method with 2 passed arguments
    >>> my_list = MyList()
    >>> my_list.print_sorted([1, 2], [5, 4])
    Traceback (most recent call last):
    	      ...
    TypeError: print_sorted() takes 1 positional argument but 3 were given
